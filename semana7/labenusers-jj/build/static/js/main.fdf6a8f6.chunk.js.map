{"version":3,"sources":["components/ListaUsuarios.js","App.js","serviceWorker.js","index.js"],"names":["BotaoDeletar","styled","button","ListaUsuarios","apagarUsuario","userId","axios","delete","headers","Authorization","then","response","window","alert","location","reload","catch","error","listaFinal","this","props","listaAtualizada","map","usuario","index","key","name","onClick","id","React","Component","Container","div","ContainerUm","ContainerDois","ContainerForm","BotaoForm","App","state","lista","inicio","inputNomeValor","inputEmailValor","pegaUsuarios","get","resposta","setState","data","console","log","alteraBotao","inputName","event","target","value","inputEmail","novoUsuario","body","post","cadastrarUsuarios","onChange","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qbAIA,IAAMA,EAAeC,IAAOC,OAAV,KAOLC,EAAb,4MAGIC,cAAgB,SAACC,GACbC,IAAMC,OAAN,8EAAoFF,GAAU,CAC9FG,QAAS,CACLC,cAAe,wBAGpBC,MAAM,SAAAC,GACLC,OAAOC,MAAM,uBACbD,OAAOE,SAASC,YACjBC,OAAO,SAAAC,GACNL,OAAOC,MAAM,uBAbrB,uDAkBY,IAAD,OACCK,EAAaC,KAAKC,MAAMC,gBAAgBC,KAAI,SAACC,EAASC,GAC1D,OACI,yBAAKC,IAAKD,GACR,8BAAOD,EAAQG,MACf,kBAAC1B,EAAD,CAAc2B,QAAS,kBAAM,EAAKvB,cAAcmB,EAAQK,MAAxD,KACA,iCAIV,OACE,6BACE,uDACCV,OA/BT,GAAmCW,IAAMC,W,+xBCNzC,IAAMC,EAAY9B,IAAO+B,IAAV,KAITC,EAAchC,IAAO+B,IAAV,KAIXE,EAAgBjC,IAAO+B,IAAV,KAMbG,EAAgBlC,IAAO+B,IAAV,KASbI,EAAYnC,IAAOC,OAAV,KAuGAmC,E,4MA5FbC,MAAQ,CACNC,MAAO,GACPC,QAAQ,EACRC,eAAgB,GAChBC,gBAAiB,I,EAOnBC,aAAe,WACbrC,IACGsC,IAAI,sEACH,CACEpC,QAAS,CACPC,cAAe,wBAIpBC,MAAK,SAAAmC,GACJ,EAAKC,SAAS,CAACP,MAAOM,EAASE,UAEhC/B,OAAM,SAAAC,GACL+B,QAAQC,IAAIhC,EAAMN,c,EAIxBuC,YAAc,WACZ,EAAKJ,SAAS,CAACN,QAAS,EAAKF,MAAME,SACnC,EAAKG,gB,EAGPQ,UAAY,SAACC,GACX,EAAKN,SAAS,CAACL,eAAgBW,EAAMC,OAAOC,S,EAG9CC,WAAa,SAACH,GACZ,EAAKN,SAAS,CAACJ,gBAAiBU,EAAMC,OAAOC,S,EAK/CE,YAAc,WACZ,IAAMC,EAAO,CACX,KAAQ,EAAKnB,MAAMG,eACnB,MAAS,EAAKH,MAAMI,iBAEtBpC,IAAMoD,KAAK,sEAAuED,EAAM,CACtFjD,QAAS,CACPC,cAAe,wBAEhBC,MAAM,SAAAC,GACPC,OAAOC,MAAM,8BACb,EAAKiC,SAAS,CAACL,eAAgB,GAAIC,gBAAiB,KACpD,EAAKC,kBACJ3B,OAAO,SAAAC,GACRL,OAAOC,MAAM,iCACb,EAAKiC,SAAS,CAACL,eAAgB,GAAIC,gBAAiB,S,kEAlDtDvB,KAAKwB,iB,+BAyDL,IAAMgB,EACJ,kBAACxB,EAAD,KACE,yCACA,2BAAOmB,MAAOnC,KAAKmB,MAAMG,eAAgBmB,SAAUzC,KAAKgC,YACxD,2CACA,2BAAOG,MAAOnC,KAAKmB,MAAMI,gBAAiBkB,SAAUzC,KAAKoC,aACzD,kBAACnB,EAAD,CAAWT,QAASR,KAAKqC,aAAzB,WAMJ,OADAR,QAAQC,MAEN,kBAAClB,EAAD,KACE,kBAACE,EAAD,KACE,4BAAQN,QAASR,KAAK+B,aAAc/B,KAAKmB,MAAME,OAAS,6BAA4B,kCAEtF,kBAACN,EAAD,KACGf,KAAKmB,MAAME,OAASmB,EAAkB,kBAAC,EAAD,CAAetC,gBAAiBF,KAAKmB,MAAMC,c,GApF1EV,IAAMC,WC1BJ+B,QACW,cAA7BjD,OAAOE,SAASgD,UAEe,UAA7BlD,OAAOE,SAASgD,UAEhBlD,OAAOE,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdzD,OAAM,SAAAC,GACL+B,QAAQ/B,MAAMA,EAAMyD,c","file":"static/js/main.fdf6a8f6.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst BotaoDeletar = styled.button`\n    border: none;\n    color: red;\n    margin-left: 5rem;\n    cursor: pointer;\n`   \n\nexport class ListaUsuarios extends React.Component {\n\n\n    apagarUsuario = (userId) => {\n        axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`, {\n        headers: {\n            Authorization: \"jerry-jones-julian\"\n        }\n\n    }).then( response => {\n        window.alert(\"Usuário deletado\")\n        window.location.reload()\n    }).catch( error => {\n        window.alert(\"Tente novamente\")\n    })\n    \n    }\n\n  render() {\n      const listaFinal = this.props.listaAtualizada.map((usuario, index) => {\n        return (\n            <div key={index}>\n              <span>{usuario.name}</span>\n              <BotaoDeletar onClick={() => this.apagarUsuario(usuario.id)}>X</BotaoDeletar>\n              <hr/>\n            </div>\n          )\n      })\n    return (\n      <div>\n        <h3>Usuários Cadastrados</h3>\n        {listaFinal}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ListaUsuarios } from './components/ListaUsuarios';\nimport axios from 'axios';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n` \nconst ContainerUm = styled.div`\n  justify-items: flex-start;\n  margin: 1rem;\n` \nconst ContainerDois = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n`\n\nconst ContainerForm = styled.div`\n  width: 25rem;\n  height: 12rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border: 1px #2D3058 solid;\n`\nconst BotaoForm = styled.button`\n  width: 4rem;\n  height: 2rem;\n  margin-top: 1rem;\n  color: white;\n  background-color: #2D3058;\n  border: none;\n`\n\n\nclass App extends React.Component {\n  state = {\n    lista: [],\n    inicio: true,\n    inputNomeValor: \"\",\n    inputEmailValor: \"\"\n  }\n\n  componentDidMount() {\n    this.pegaUsuarios();\n  }\n\n  pegaUsuarios = () => {\n    axios\n      .get(\"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\",\n        {\n          headers: {\n            Authorization: \"jerry-jones-julian\"\n          }\n        }\n      )\n      .then(resposta => {\n        this.setState({lista: resposta.data})\n      })\n      .catch(error => {\n        console.log(error.response);\n      });\n  };\n\n  alteraBotao = () => {\n    this.setState({inicio: !this.state.inicio})\n    this.pegaUsuarios();\n  }\n\n  inputName = (event) => {\n    this.setState({inputNomeValor: event.target.value})\n  }\n\n  inputEmail = (event) => {\n    this.setState({inputEmailValor: event.target.value})\n  }\n  \n  \n\n  novoUsuario = () => {\n    const body = {\n      \"name\": this.state.inputNomeValor,\n      \"email\": this.state.inputEmailValor\n    }\n    axios.post(\"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\", body, {\n      headers: {\n        Authorization: \"jerry-jones-julian\"\n      }\n    }).then( response => {\n      window.alert(\"Novo usuário cadastrado\")\n      this.setState({inputNomeValor: \"\", inputEmailValor: \"\"})\n      this.pegaUsuarios();\n    }).catch( error => {\n      window.alert(\"Ihh! Algo parece estar errado\")\n      this.setState({inputNomeValor: \"\", inputEmailValor: \"\"})\n    })\n    \n  }\n  \n  render() {\n    \n    const cadastrarUsuarios = (\n      <ContainerForm>\n        <label>Nome: </label>\n        <input value={this.state.inputNomeValor} onChange={this.inputName}/>\n        <label>E-mail: </label>\n        <input value={this.state.inputEmailValor} onChange={this.inputEmail}/>\n        <BotaoForm onClick={this.novoUsuario}>Salvar</BotaoForm>\n      </ContainerForm>\n    )\n    \n    \n    console.log()\n    return (\n      <Container>\n        <ContainerUm>\n          <button onClick={this.alteraBotao}>{this.state.inicio ? \"Ir para página de lista\" : \"Ir para página de registro\"}</button>\n        </ContainerUm>    \n        <ContainerDois>\n          {this.state.inicio ? cadastrarUsuarios:<ListaUsuarios listaAtualizada={this.state.lista}/>}\n        </ContainerDois>\n      </Container>\n      \n    );\n  }\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}